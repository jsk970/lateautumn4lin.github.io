<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>透过真实场景分析K8S的EndpointController的源码</title>
      <link href="/2019/08/28/%E9%80%8F%E8%BF%87%E7%9C%9F%E5%AE%9E%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90K8S%E7%9A%84EndpointController%E7%9A%84%E6%BA%90%E7%A0%81/"/>
      <url>/2019/08/28/%E9%80%8F%E8%BF%87%E7%9C%9F%E5%AE%9E%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90K8S%E7%9A%84EndpointController%E7%9A%84%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h3 id="场景重现"><a href="#场景重现" class="headerlink" title="场景重现"></a>场景重现</h3><p>最近遇到一个问题，在<code>K8S</code>的几台机器上中创建了<code>Glusterfs</code>的集群，通过官方的教程一步步的来利用<code>Glusterfs</code>创建<code>Volume</code>以及<code>PV</code>，不过只是创建了每个<code>Volume</code>的<code>Endpoint</code>，并没有相对应的创建<code>Service</code>实例（官方说创建<code>Service</code>会使<code>Endpoint</code>持久化，当时并没有理会），然后在一次集群重启的时候发现<code>Endpoint</code>实例并没有启动起来，很疑惑，像其他的<code>K8S</code>对象，例如<code>POD</code>，<code>Deployment</code>，<code>Service</code>都启动起来了，但是<code>Endpoint</code>并没有，带着这个问题看了下官方的<code>Issue</code>，并没有什么有效的解答，大家可以参考一下<a href="[https://github.com/kubernetes/kubernetes/issues/12964](https://github.com/kubernetes/kubernetes/issues/12964)">Issue: </a><a href="https://github.com/kubernetes/kubernetes/issues/12964" target="_blank" rel="noopener">Endpoints are not persistented</a></p><h3 id="1-探究源码"><a href="#1-探究源码" class="headerlink" title="1. 探究源码"></a>1. 探究源码</h3><h4 id="1-1-源码版本"><a href="#1-1-源码版本" class="headerlink" title="1.1 源码版本"></a>1.1 源码版本</h4><ul><li>基于k8s release-1.13</li></ul><h4 id="1-2-源码目录结构"><a href="#1-2-源码目录结构" class="headerlink" title="1.2 源码目录结构"></a>1.2 源码目录结构</h4><p>由于我们重点看<code>Endpoint</code>部分，因此我们只看<code>Endpoint</code>相关的源码<br><img src="https://upload-images.jianshu.io/upload_images/3029445-ac22778f75c458be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Endpoint"></p><h4 id="1-3-Endpoint的初始化"><a href="#1-3-Endpoint的初始化" class="headerlink" title="1.3 Endpoint的初始化"></a>1.3 Endpoint的初始化</h4><p>文件位置： <code>endpoints_controller.go</code></p><pre class=" language-golang"><code class="language-golang">// NewEndpointController returns a new *EndpointController.//我们可以看到在Endpoint初始化的时候，已经注册了三个informer，分别是podInformer，serviceInformer，endpointsInformerfunc NewEndpointController(podInformer coreinformers.PodInformer, serviceInformer coreinformers.ServiceInformer,    endpointsInformer coreinformers.EndpointsInformer, client clientset.Interface) *EndpointController {    broadcaster := record.NewBroadcaster()    broadcaster.StartLogging(klog.Infof)    broadcaster.StartRecordingToSink(&v1core.EventSinkImpl{Interface: client.CoreV1().Events("")})    recorder := broadcaster.NewRecorder(scheme.Scheme, v1.EventSource{Component: "endpoint-controller"})    if client != nil && client.CoreV1().RESTClient().GetRateLimiter() != nil {        metrics.RegisterMetricAndTrackRateLimiterUsage("endpoint_controller", client.CoreV1().RESTClient().GetRateLimiter())    }    e := &EndpointController{        client:           client,        queue:            workqueue.NewNamedRateLimitingQueue(workqueue.DefaultControllerRateLimiter(), "endpoint"),        workerLoopPeriod: time.Second,    }        //这里对service进行watch操作，并注册了对应的add\update\del等操作    serviceInformer.Informer().AddEventHandler(cache.ResourceEventHandlerFuncs{//add：以添加的service的namespace/name形式为key，并将该key加入 queue        AddFunc: e.enqueueService,//update：以更新后的service的namespace/name形式为key，并将该key加入 queue        UpdateFunc: func(old, cur interface{}) {            e.enqueueService(cur)        },//delete：以删除的service的namespace/name形式为key，并将该key加入 queue        DeleteFunc: e.enqueueService,    })    e.serviceLister = serviceInformer.Lister()    e.servicesSynced = serviceInformer.Informer().HasSynced        //这里对pod进行watch操作，并注册了对应的add\update\del等操作    podInformer.Informer().AddEventHandler(cache.ResourceEventHandlerFuncs{        AddFunc:    e.addPod,        UpdateFunc: e.updatePod,        DeleteFunc: e.deletePod,    })    e.podLister = podInformer.Lister()    e.podsSynced = podInformer.Informer().HasSynced    e.endpointsLister = endpointsInformer.Lister()    e.endpointsSynced = endpointsInformer.Informer().HasSynced    e.triggerTimeTracker = NewTriggerTimeTracker()    e.eventBroadcaster = broadcaster    e.eventRecorder = recorder    return e}</code></pre><p>我们看看<code>pod</code>注册的<code>Handler</code>引用了哪些函数</p><h5 id="1-3-1-e-addPod"><a href="#1-3-1-e-addPod" class="headerlink" title="1.3.1 e.addPod"></a>1.3.1 e.addPod</h5><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>EndpointController<span class="token punctuation">)</span> <span class="token function">addPod</span><span class="token punctuation">(</span>obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//实例化一个pod对象</span>    pod <span class="token operator">:=</span> obj<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span>    services<span class="token punctuation">,</span> err <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">getPodServiceMemberships</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        utilruntime<span class="token punctuation">.</span><span class="token function">HandleError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Unable to get pod %s/%s's service memberships: %v"</span><span class="token punctuation">,</span> pod<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span> pod<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//将service集合以namespace/name为key逐个加入到queue中</span>    <span class="token keyword">for</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> services <span class="token punctuation">{</span>        e<span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>EndpointController<span class="token punctuation">)</span> <span class="token function">getPodServiceMemberships</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span> <span class="token punctuation">(</span>sets<span class="token punctuation">.</span>String<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    set <span class="token operator">:=</span> sets<span class="token punctuation">.</span>String<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取pod与service的映射关系</span>    services<span class="token punctuation">,</span> err <span class="token operator">:=</span> e<span class="token punctuation">.</span>serviceLister<span class="token punctuation">.</span><span class="token function">GetPodServices</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// don't log this error because this function makes pointless</span>        <span class="token comment" spellcheck="true">// errors when no services match.</span>        <span class="token keyword">return</span> set<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//查找逻辑为逐个对比service的selector与该pod的label，如果service的selector为该pod label的子集，则表示该pod属于service</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> services <span class="token punctuation">{</span>        key<span class="token punctuation">,</span> err <span class="token operator">:=</span> controller<span class="token punctuation">.</span><span class="token function">KeyFunc</span><span class="token punctuation">(</span>services<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        set<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> set<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h5 id="1-3-2-e-updatePod"><a href="#1-3-2-e-updatePod" class="headerlink" title="1.3.2 e.updatePod"></a>1.3.2 e.updatePod</h5><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>EndpointController<span class="token punctuation">)</span> <span class="token function">updatePod</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> cur <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    newPod <span class="token operator">:=</span> cur<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span>    oldPod <span class="token operator">:=</span> old<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//比较两者的ResourceVersion，对比更新后的pod与原pod，如果两者的资源版本相等，则直接返回，不进行入队操作</span>    <span class="token keyword">if</span> newPod<span class="token punctuation">.</span>ResourceVersion <span class="token operator">==</span> oldPod<span class="token punctuation">.</span>ResourceVersion <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Periodic resync will send update events for all known pods.</span>        <span class="token comment" spellcheck="true">// Two different versions of the same pod will always have different RVs.</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断pod相关信息是否发生改变</span>    podChangedFlag <span class="token operator">:=</span> <span class="token function">podChanged</span><span class="token punctuation">(</span>oldPod<span class="token punctuation">,</span> newPod<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Check if the pod labels have changed, indicating a possible</span>    <span class="token comment" spellcheck="true">// change in the service membership</span>    labelsChanged <span class="token operator">:=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">//判断两者的label是否已经不一致，或者hostname或subdomain已改变</span>    <span class="token keyword">if</span> <span class="token operator">!</span>reflect<span class="token punctuation">.</span><span class="token function">DeepEqual</span><span class="token punctuation">(</span>newPod<span class="token punctuation">.</span>Labels<span class="token punctuation">,</span> oldPod<span class="token punctuation">.</span>Labels<span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token operator">!</span><span class="token function">hostNameAndDomainAreEqual</span><span class="token punctuation">(</span>newPod<span class="token punctuation">,</span> oldPod<span class="token punctuation">)</span> <span class="token punctuation">{</span>        labelsChanged <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// If both the pod and labels are unchanged, no update is needed</span>    <span class="token keyword">if</span> <span class="token operator">!</span>podChangedFlag <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>labelsChanged <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断错误，则获取对应的service和pod映射关系</span>    services<span class="token punctuation">,</span> err <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">getPodServiceMemberships</span><span class="token punctuation">(</span>newPod<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        utilruntime<span class="token punctuation">.</span><span class="token function">HandleError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Unable to get pod %v/%v's service memberships: %v"</span><span class="token punctuation">,</span> newPod<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span> newPod<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> labelsChanged <span class="token punctuation">{</span>        oldServices<span class="token punctuation">,</span> err <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">getPodServiceMemberships</span><span class="token punctuation">(</span>oldPod<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            utilruntime<span class="token punctuation">.</span><span class="token function">HandleError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Unable to get pod %v/%v's service memberships: %v"</span><span class="token punctuation">,</span> oldPod<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span> oldPod<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        services <span class="token operator">=</span> <span class="token function">determineNeededServiceUpdates</span><span class="token punctuation">(</span>oldServices<span class="token punctuation">,</span> services<span class="token punctuation">,</span> podChangedFlag<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> services <span class="token punctuation">{</span>        e<span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">podChanged</span><span class="token punctuation">(</span>oldPod<span class="token punctuation">,</span> newPod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//podChanged函数，其检测逻辑为，如果新旧两个pod的DeletionTimestamp字段不等则返回true，否则继续判断两者的就绪状态，如果不等则返回true，最后再判断新旧pod的ip、nodename、namespace、UID是否相等，如果相等则返回false，否则返回true。将返回结果赋值给podChangedFlag</span>    <span class="token comment" spellcheck="true">// If the pod's deletion timestamp is set, remove endpoint from ready address.</span>    <span class="token keyword">if</span> newPod<span class="token punctuation">.</span>DeletionTimestamp <span class="token operator">!=</span> oldPod<span class="token punctuation">.</span>DeletionTimestamp <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// If the pod's readiness has changed, the associated endpoint address</span>    <span class="token comment" spellcheck="true">// will move from the unready endpoints set to the ready endpoints.</span>    <span class="token comment" spellcheck="true">// So for the purposes of an endpoint, a readiness change on a pod</span>    <span class="token comment" spellcheck="true">// means we have a changed pod.</span>    <span class="token keyword">if</span> podutil<span class="token punctuation">.</span><span class="token function">IsPodReady</span><span class="token punctuation">(</span>oldPod<span class="token punctuation">)</span> <span class="token operator">!=</span> podutil<span class="token punctuation">.</span><span class="token function">IsPodReady</span><span class="token punctuation">(</span>newPod<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Convert the pod to an EndpointAddress, clear inert fields,</span>    <span class="token comment" spellcheck="true">// and see if they are the same.</span>    newEndpointAddress <span class="token operator">:=</span> <span class="token function">podToEndpointAddress</span><span class="token punctuation">(</span>newPod<span class="token punctuation">)</span>    oldEndpointAddress <span class="token operator">:=</span> <span class="token function">podToEndpointAddress</span><span class="token punctuation">(</span>oldPod<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Ignore the ResourceVersion because it changes</span>    <span class="token comment" spellcheck="true">// with every pod update. This allows the comparison to</span>    <span class="token comment" spellcheck="true">// show equality if all other relevant fields match.</span>    newEndpointAddress<span class="token punctuation">.</span>TargetRef<span class="token punctuation">.</span>ResourceVersion <span class="token operator">=</span> <span class="token string">""</span>    oldEndpointAddress<span class="token punctuation">.</span>TargetRef<span class="token punctuation">.</span>ResourceVersion <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> reflect<span class="token punctuation">.</span><span class="token function">DeepEqual</span><span class="token punctuation">(</span>newEndpointAddress<span class="token punctuation">,</span> oldEndpointAddress<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// The pod has not changed in any way that impacts the endpoints</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><h4 id="1-4-Endpoint-Controller具体逻辑"><a href="#1-4-Endpoint-Controller具体逻辑" class="headerlink" title="1.4 Endpoint-Controller具体逻辑"></a>1.4 Endpoint-Controller具体逻辑</h4><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Run will not return until stopCh is closed. workers determines how many</span><span class="token comment" spellcheck="true">// endpoints will be handled in parallel.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>EndpointController<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span>workers <span class="token builtin">int</span><span class="token punctuation">,</span> stopCh <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> utilruntime<span class="token punctuation">.</span><span class="token function">HandleCrash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> e<span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">ShutDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    klog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Starting endpoint controller"</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> klog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Shutting down endpoint controller"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 等待pod、service、endpoint列表同步</span>    <span class="token keyword">if</span> <span class="token operator">!</span>controller<span class="token punctuation">.</span><span class="token function">WaitForCacheSync</span><span class="token punctuation">(</span><span class="token string">"endpoint"</span><span class="token punctuation">,</span> stopCh<span class="token punctuation">,</span> e<span class="token punctuation">.</span>podsSynced<span class="token punctuation">,</span> e<span class="token punctuation">.</span>servicesSynced<span class="token punctuation">,</span> e<span class="token punctuation">.</span>endpointsSynced<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 这里workers数为kube-controller-manager启动参数中的--concurrent-endpoint-syncs决定，默认为5，workerLoopPeriod为1秒</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> workers<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 执行worker函数，for死循环处理queue中的key</span>        <span class="token keyword">go</span> wait<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>worker<span class="token punctuation">,</span> e<span class="token punctuation">.</span>workerLoopPeriod<span class="token punctuation">,</span> stopCh<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">defer</span> utilruntime<span class="token punctuation">.</span><span class="token function">HandleCrash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        e<span class="token punctuation">.</span><span class="token function">checkLeftoverEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&lt;-</span>stopCh<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>EndpointController<span class="token punctuation">)</span> <span class="token function">worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> e<span class="token punctuation">.</span><span class="token function">processNextWorkItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>EndpointController<span class="token punctuation">)</span> <span class="token function">processNextWorkItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    eKey<span class="token punctuation">,</span> quit <span class="token operator">:=</span> e<span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> quit <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> e<span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span>eKey<span class="token punctuation">)</span>    err <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">syncService</span><span class="token punctuation">(</span>eKey<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    e<span class="token punctuation">.</span><span class="token function">handleErr</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> eKey<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p>endpointController的主要逻辑在<code>syncService</code>函数</p><pre><code>func (e *EndpointController) syncService(key string) error {    startTime := time.Now()    defer func() {        klog.V(4).Infof("Finished syncing service %q endpoints. (%v)", key, time.Since(startTime))    }() // 根据key获取service的namespace和name    namespace, name, err := cache.SplitMetaNamespaceKey(key)    if err != nil {        return err    }    service, err := e.serviceLister.Services(namespace).Get(name)    if err != nil { // 如果service已经被删除，则也要删除对用的endpoint资源        // Delete the corresponding endpoint, as the service has been deleted.        // TODO: Please note that this will delete an endpoint when a        // service is deleted. However, if we're down at the time when        // the service is deleted, we will miss that deletion, so this        // doesn't completely solve the problem. See #6877.        err = e.client.CoreV1().Endpoints(namespace).Delete(name, nil)        if err != nil &amp;&amp; !errors.IsNotFound(err) {            return err        }        e.triggerTimeTracker.DeleteEndpoints(namespace, name)        return nil    }    // 如果service的.spec.selector字段为空，直接返回，endpointController不处理这种情况    if service.Spec.Selector == nil {        // services without a selector receive no endpoints from this controller;        // these services will receive the endpoints that are created out-of-band via the REST API.        return nil    }    klog.V(5).Infof("About to update endpoints for service %q", key)    pods, err := e.podLister.Pods(service.Namespace).List(labels.Set(service.Spec.Selector).AsSelectorPreValidated())    if err != nil {        // Since we're getting stuff from a local cache, it is        // basically impossible to get this error.        return err    }    // If the user specified the older (deprecated) annotation, we have to respect it.    tolerateUnreadyEndpoints := service.Spec.PublishNotReadyAddresses    //如果service的注解含有key为service.alpha.kubernetes.io/tolerate-unready-endpoints的值，该值为bool类型，默认tolerateUnreadyEndpoints值为false    if v, ok := service.Annotations[TolerateUnreadyEndpointsAnnotation]; ok {        b, err := strconv.ParseBool(v)        if err == nil {            tolerateUnreadyEndpoints = b        } else {            utilruntime.HandleError(fmt.Errorf("Failed to parse annotation %v: %v", TolerateUnreadyEndpointsAnnotation, err))        }    }    // We call ComputeEndpointsLastChangeTriggerTime here to make sure that the state of the trigger    // time tracker gets updated even if the sync turns out to be no-op and we don't update the    // endpoints object.    endpointsLastChangeTriggerTime := e.triggerTimeTracker.        ComputeEndpointsLastChangeTriggerTime(namespace, name, service, pods)    subsets := []v1.EndpointSubset{}    var totalReadyEps int    var totalNotReadyEps int    //循环处理pod列表    for _, pod := range pods {        // pod的podIp为空，则continue for循环        if len(pod.Status.PodIP) == 0 {            klog.V(5).Infof("Failed to find an IP for pod %s/%s", pod.Namespace, pod.Name)            continue        }        // 如果该pod正在被删除，则continue for循环        if !tolerateUnreadyEndpoints &amp;&amp; pod.DeletionTimestamp != nil { // 获取该pod的信息，输出EndpointAddress结构体变量            klog.V(5).Infof("Pod is being deleted %s/%s", pod.Namespace, pod.Name)            continue        }        epa := *podToEndpointAddress(pod)        hostname := pod.Spec.Hostname        // 如果pod存在hostname，则最后的FQDN为hostname.subdomain.namespace.svc.cluster.local        if len(hostname) &gt; 0 &amp;&amp; pod.Spec.Subdomain == service.Name &amp;&amp; service.Namespace == pod.Namespace {            epa.Hostname = hostname        }        // Allow headless service not to have ports.        // 允许headless service没有端口        if len(service.Spec.Ports) == 0 {            if service.Spec.ClusterIP == api.ClusterIPNone {  // 1、如果tolerateUnreadyEndpoints为true，允许未就绪的pod也列入Addresses列表，如果tolerateUnreadyEndpoints为false但pod状态为ready则将pod列入Addresses列表;                // 2、检测pod的重启策略，如果重启策略为Never，pod的运行状态不为Failed且不是Succeeded，将该pod列入NotReadyAddresses，如果重启策略为OnFailure并且pod的运行状态不为Succeeded，将该pod列入NotReadyAddresses，其它情况也将该pod列入NotReadyAddresses；                subsets, totalReadyEps, totalNotReadyEps = addEndpointSubset(subsets, pod, epa, nil, tolerateUnreadyEndpoints)                // No need to repack subsets for headless service without ports.            }        } else {            //　循环service的ports端口            for i := range service.Spec.Ports {                servicePort := &amp;service.Spec.Ports[i]                portName := servicePort.Name                portProto := servicePort.Protocol                portNum, err := podutil.FindPort(pod, servicePort)                // 如果service中的port在pod中不存在，则继续for循环                if err != nil {                    klog.V(4).Infof("Failed to find port for service %s/%s: %v", service.Namespace, service.Name, err)                    continue                }                var readyEps, notReadyEps int                epp := &amp;v1.EndpointPort{Name: portName, Port: int32(portNum), Protocol: portProto}                subsets, readyEps, notReadyEps = addEndpointSubset(subsets, pod, epa, epp, tolerateUnreadyEndpoints)                totalReadyEps = totalReadyEps + readyEps                totalNotReadyEps = totalNotReadyEps + notReadyEps            }        }    }    // 重新整理subsets    subsets = endpoints.RepackSubsets(subsets)    // 如果endpoint不存在(通常该情况是新建一个service的情况)，则新建一个，如果是其他未知错误，则返回err    // See if there's actually an update here.    currentEndpoints, err := e.endpointsLister.Endpoints(service.Namespace).Get(service.Name)    if err != nil {        if errors.IsNotFound(err) {            currentEndpoints = &amp;v1.Endpoints{                ObjectMeta: metav1.ObjectMeta{                    Name:   service.Name,                    Labels: service.Labels,                },            }        } else {            return err        }    }    // currentEndpoints的资源版本为空时，表示要创建endpoint    createEndpoints := len(currentEndpoints.ResourceVersion) == 0    // 如果当前currentEndpoints的subset列表和重新整理后的subsets相等，并且label与service的label一致，则忽略本次更新操作    if !createEndpoints &amp;&amp;        apiequality.Semantic.DeepEqual(currentEndpoints.Subsets, subsets) &amp;&amp;        apiequality.Semantic.DeepEqual(currentEndpoints.Labels, service.Labels) {        klog.V(5).Infof("endpoints are equal for %s/%s, skipping update", service.Namespace, service.Name)        return nil    }    newEndpoints := currentEndpoints.DeepCopy()    newEndpoints.Subsets = subsets    newEndpoints.Labels = service.Labels    if newEndpoints.Annotations == nil {        newEndpoints.Annotations = make(map[string]string)    }    if !endpointsLastChangeTriggerTime.IsZero() {        newEndpoints.Annotations[v1.EndpointsLastChangeTriggerTime] =            endpointsLastChangeTriggerTime.Format(time.RFC3339Nano)    } else { // No new trigger time, clear the annotation.        delete(newEndpoints.Annotations, v1.EndpointsLastChangeTriggerTime)    }    klog.V(4).Infof("Update endpoints for %v/%v, ready: %d not ready: %d", service.Namespace, service.Name, totalReadyEps, totalNotReadyEps)    if createEndpoints {        // 如果没有与service同命名空间和同名的endpoint，则生成新的endpoint        // No previous endpoints, create them        _, err = e.client.CoreV1().Endpoints(service.Namespace).Create(newEndpoints)    } else {        // Pre-existing        // 已经存在与service同命名空间和同名的endpoint，需要更新endpoint        _, err = e.client.CoreV1().Endpoints(service.Namespace).Update(newEndpoints)    }    if err != nil {        if createEndpoints &amp;&amp; errors.IsForbidden(err) {            // A request is forbidden primarily for two reasons:            // 1. namespace is terminating, endpoint creation is not allowed by default.            // 2. policy is misconfigured, in which case no service would function anywhere.            // Given the frequency of 1, we log at a lower level.            klog.V(5).Infof("Forbidden from creating endpoints: %v", err)        }        if createEndpoints {            e.eventRecorder.Eventf(newEndpoints, v1.EventTypeWarning, "FailedToCreateEndpoint", "Failed to create endpoint for service %v/%v: %v", service.Namespace, service.Name, err)        } else {            e.eventRecorder.Eventf(newEndpoints, v1.EventTypeWarning, "FailedToUpdateEndpoint", "Failed to update endpoint %v/%v: %v", service.Namespace, service.Name, err)        }        return err    }    return nil}</code></pre><h4 id="1-5-Endpoint检测"><a href="#1-5-Endpoint检测" class="headerlink" title="1.5 Endpoint检测"></a>1.5 Endpoint检测</h4><p>之前说的是当<code>Endpoint</code>和<code>Service</code>绑定的时候<code>Service</code>和<code>Pod</code>改变时的一系列操作，现在我们回到问题，如果<code>Endpoint</code>单独存在，<code>K8S</code>是如何检测并且删除的？<br>我们重新看看<code>Run</code>函数中的</p><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">defer</span> utilruntime<span class="token punctuation">.</span><span class="token function">HandleCrash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        e<span class="token punctuation">.</span><span class="token function">checkLeftoverEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>K8S</code>在运行<code>Run</code>函数的时候启动了一个协程去检测当前所有的<code>Endpoint</code></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// checkLeftoverEndpoints lists all currently existing endpoints and adds their</span><span class="token comment" spellcheck="true">// service to the queue. This will detect endpoints that exist with no</span><span class="token comment" spellcheck="true">// corresponding service; these endpoints need to be deleted. We only need to</span><span class="token comment" spellcheck="true">// do this once on startup, because in steady-state these are detected (but</span><span class="token comment" spellcheck="true">// some stragglers could have been left behind if the endpoint controller</span><span class="token comment" spellcheck="true">// reboots).</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>EndpointController<span class="token punctuation">)</span> <span class="token function">checkLeftoverEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//拉取当前所有的endpoint对象</span>    list<span class="token punctuation">,</span> err <span class="token operator">:=</span> e<span class="token punctuation">.</span>endpointsLister<span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span>labels<span class="token punctuation">.</span><span class="token function">Everything</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        utilruntime<span class="token punctuation">.</span><span class="token function">HandleError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Unable to list endpoints (%v); orphaned endpoints will not be cleaned up. (They're pretty harmless, but you can restart this component if you want another attempt made.)"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//轮询所有endpoint</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ep <span class="token operator">:=</span> <span class="token keyword">range</span> list <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> ep<span class="token punctuation">.</span>Annotations<span class="token punctuation">[</span>resourcelock<span class="token punctuation">.</span>LeaderElectionRecordAnnotationKey<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// when there are multiple controller-manager instances,</span>            <span class="token comment" spellcheck="true">// we observe that it will delete leader-election endpoints after 5min</span>            <span class="token comment" spellcheck="true">// and cause re-election</span>            <span class="token comment" spellcheck="true">// so skip the delete here</span>            <span class="token comment" spellcheck="true">// as leader-election only have endpoints without service</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        key<span class="token punctuation">,</span> err <span class="token operator">:=</span> controller<span class="token punctuation">.</span><span class="token function">KeyFunc</span><span class="token punctuation">(</span>ep<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            utilruntime<span class="token punctuation">.</span><span class="token function">HandleError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Unable to get key for endpoint %#v"</span><span class="token punctuation">,</span> ep<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//假如此处endpoint没有对应的service，猜想会把endpoint的name当成key传入queue，然后在之前的逻辑中判断获取service name错误，于是删除endpoint</span>        e<span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-总结"><a href="#2-总结" class="headerlink" title="2. 总结"></a>2. 总结</h3><p>一句话，遇到如上问题有两种解决的方式：</p><ol><li>创建<code>Service</code>的时候使用<code>Selector</code>，这样可以自动创建<code>Endpoint</code></li><li>在创建<code>Endpoint</code>还需要创建<code>Service</code>，这样才可以持久化<code>Endpoint</code></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 解读K8S源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8S </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
